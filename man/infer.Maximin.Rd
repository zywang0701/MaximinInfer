% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Methods.R
\name{infer.Maximin}
\alias{infer.Maximin}
\title{Inference method for Maximin}
\usage{
\method{infer}{Maximin}(object, gen.size = 500, delta = -1, threshold = 2, alpha = 0.01, ...)
}
\arguments{
\item{object}{Object of class inheriting from "Maximin"}

\item{gen.size}{The generated sample size}

\item{delta}{The ridge penalty. If set as negative value, the penalty is decided data-dependently. (Default = -1)}

\item{threshold}{Should generated samples be filter or not? If 0, do not filter;
if 1, use chi-square threshold to filter;
if 2, use normal threshold to filter. (Default = 2)}

\item{alpha}{confidence value to select generated samples}

\item{...}{further arguments passed}
}
\value{
\item{delta}{The ridge penalty used}
\item{weight}{The weight vector for groups, of length \eqn{L}}
\item{point}{The point estimator of the linear contrast}
\item{mm.effect}{The aggregated maximin effect (coefficients), of length \eqn{p} or \eqn{p+1}}
\item{CI}{Confidence interval for the linear contrast}
}
\description{
Point estimator and Confidence interval based on Maximin object
}
\examples{
\donttest{
## number of groups
L=2
## dimension
p=500
## sample size for each group of source data
ns.source = c(500, 400)
## sample size for target data
n.target=1000

A1gen <- function(rho,p){
  A1=matrix(0,p,p)
  for(i in 1:p){
    for(j in 1:p){
      A1[i,j]<-rho^(abs(i-j))
    }
  }
  return(A1)
}
## mean vector
mean.source = rep(0, p)
mean.target = rep(0, p)
## covariate shifts
cov.source = A1gen(0.6, p)
cov.target = diag(p)
## true coefficients
Bs = matrix(0, p, L)
Bs[1:10,1] = seq(1:10)/40
Bs[1:10,2] = -seq(1:10)/40
## Data
X.source = MASS::mvrnorm(sum(ns.source), mu=mean.source, Sigma=cov.source)
X.target = MASS::mvrnorm(n.target, mu=mean.target, Sigma=cov.target)
idx.source = rep(1:L, times=ns.source)
Y.source = rep(0, sum(ns.source))
for(l in 1:L){
  idx.l = which(idx.source==l)
  Y.source[idx.l] = X.source[idx.l, ] \%*\% Bs[,l] + rnorm(ns.source[l])
}
loading = rep(0, p)
loading[1:5] = 1
mm <- Maximin(X.source, Y.source, idx.source, loading, X.target, covariate.shift = TRUE)
mmInfer <- infer(mm, gen.size=100, delta=0)
}
}
